A thief trying to escape from a jail. He has to cross N walls each with varying heights (every height is greater than 0). He climbs X feet every time. 
But, due to the slippery nature of those walls, every time he slips back by Y feet. 
Now the task is to calculate the total number of jumps required to cross all walls and escape from the jail.
Examples : 
 

Input : heights = [11, 11]
                maxHt = 10;
                slip = 1; 
Output : 4
He needs to make 2 jumps for first wall
and 2 jumps for second wall.

/////////////////////////////////////////
Solution
/////////////////////////////////////////

let wallsHt = [11, 10, 10, 9];
let maxHt = 10;
let slip = 1;

function countJump(wallsHt, maxHt, slip) {
  let jump = 0;
  for (let i = 0; i < wallsHt.length; i++) {
    if (wallsHt[i] <= maxHt) {
      jump++;
      continue;
    }

    let ht = wallsHt[i];

    while (ht > maxHt) {
      jump++;
      ht = ht - (maxHt - slip);
    }
    jump++;
  }
  return jump;
}

let jumps = countJump(wallsHt, maxHt, slip);
console.log(jumps);
